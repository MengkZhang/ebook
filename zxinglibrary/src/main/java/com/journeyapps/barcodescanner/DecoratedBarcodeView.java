package com.journeyapps.barcodescanner;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.TypedArray;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.KeyEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.FrameLayout;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.DecodeHintType;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.ResultPoint;
import com.google.zxing.client.android.DecodeFormatManager;
import com.google.zxing.client.android.DecodeHintManager;
import com.google.zxing.client.android.Intents;
import com.google.zxing.client.android.R;
import com.journeyapps.barcodescanner.camera.CameraSettings;

import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Encapsulates BarcodeView, ViewfinderView and status text.
 * <p>
 * To customize the UI, use BarcodeView and ViewfinderView directly.
 */
public class DecoratedBarcodeView extends FrameLayout {
    private BarcodeView barcodeView;
    private ScanBoxView mScanBoxView;

    /**
     * The instance of @link TorchListener to send events callback.
     */
    private TorchListener torchListener;

    private class WrappedCallback implements BarcodeCallback {
        private BarcodeCallback delegate;

        public WrappedCallback(BarcodeCallback delegate) {
            this.delegate = delegate;
        }

        @Override
        public void barcodeResult(BarcodeResult result) {
            delegate.barcodeResult(result);
        }

        @Override
        public void possibleResultPoints(List<ResultPoint> resultPoints) {
            delegate.possibleResultPoints(resultPoints);
        }
    }

    public DecoratedBarcodeView(Context context) {
        super(context);
        initialize();
    }

    public DecoratedBarcodeView(Context context, AttributeSet attrs) {
        super(context, attrs);
        initialize(attrs);
    }

    public DecoratedBarcodeView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        initialize(attrs);
    }

    /**
     * Initialize the view with the xml configuration based on styleable attributes.
     *
     * @param attrs The attributes to use on view.
     */
    private void initialize(AttributeSet attrs) {
        // Get attributes set on view
        TypedArray attributes = getContext().obtainStyledAttributes(attrs, R.styleable.zxing_view);
        int scannerLayout = attributes.getResourceId(
                R.styleable.zxing_view_zxing_scanner_layout, R.layout.zxing_barcode_scanner);
        attributes.recycle();
        inflate(getContext(), scannerLayout, this);
        barcodeView = (BarcodeView) findViewById(R.id.zxing_barcode_surface);
        if (barcodeView == null) {
            return;
        }
        // Pass on any preview-related attributes
        barcodeView.initializeAttributes(attrs);
        mScanBoxView = (ScanBoxView) findViewById(R.id.zxing_barcode_scanner_view);
        if (null != mScanBoxView) {
            mScanBoxView.initCustomAttrs(getContext(), attrs);
            mScanBoxView.setScanLineReverse(true);
        }
    }

    /**
     * Initialize with no custom attributes setted.
     */
    private void initialize() {
        initialize(null);
    }

    /**
     * Convenience method to initialize camera id, decode formats and prompt message from an intent.
     *
     * @param intent the intent, as generated by IntentIntegrator
     */
    public void initializeFromIntent(Intent intent) {
        // Scan the formats the intent requested, and return the result to the calling activity.
        Set<BarcodeFormat> decodeFormats = DecodeFormatManager.parseDecodeFormats(intent);
        Map<DecodeHintType, Object> decodeHints = DecodeHintManager.parseDecodeHints(intent);
        CameraSettings settings = new CameraSettings();
        if (intent.hasExtra(Intents.Scan.CAMERA_ID)) {
            int cameraId = intent.getIntExtra(Intents.Scan.CAMERA_ID, -1);
            if (cameraId >= 0) {
                settings.setRequestedCameraId(cameraId);
            }
        }
        String customPromptMessage = intent.getStringExtra(Intents.Scan.PROMPT_MESSAGE);
        if (customPromptMessage != null) {
            setStatusText(customPromptMessage);
        }
        // Check to see if the scan should be inverted.
        boolean inverted = intent.getBooleanExtra(Intents.Scan.INVERTED_SCAN, false);
        String characterSet = intent.getStringExtra(Intents.Scan.CHARACTER_SET);
        //设置条形码93格式 //EAN_13 isbn
        MultiFormatReader reader = new MultiFormatReader();
        decodeHints.put(DecodeHintType.CHARACTER_SET, "utf-8");
        decodeHints.put(DecodeHintType.TRY_HARDER, Boolean.TRUE);
        decodeHints.put(DecodeHintType.POSSIBLE_FORMATS, BarcodeFormat.CODE_93);
        reader.setHints(decodeHints);
        barcodeView.setCameraSettings(settings);
        barcodeView.setDecoderFactory(new DefaultDecoderFactory(decodeFormats, decodeHints, characterSet, inverted));
    }

    public void setStatusText(String text) {

    }

    /**
     * @see BarcodeView#pause()
     */
    public void pause() {
        barcodeView.pause();
    }

    /**
     * @see BarcodeView#pauseAndWait()
     */
    public void pauseAndWait() {
        barcodeView.pauseAndWait();
    }

    /**
     * @see BarcodeView#resume()
     */
    public void resume() {
        barcodeView.resume();
    }

    public BarcodeView getBarcodeView() {
        return (BarcodeView) findViewById(R.id.zxing_barcode_surface);
    }

    /**
     * @see BarcodeView#decodeSingle(BarcodeCallback)
     */
    public void decodeSingle(BarcodeCallback callback) {
        barcodeView.decodeSingle(new WrappedCallback(callback));
    }

    /**
     * @see BarcodeView#decodeContinuous(BarcodeCallback)
     */
    public void decodeContinuous(BarcodeCallback callback) {
        barcodeView.decodeContinuous(new WrappedCallback(callback));
    }

    /**
     * Turn on the device's flashlight.
     */
    public void setTorchOn() {
        barcodeView.setTorch(true);

        if (torchListener != null) {
            torchListener.onTorchOn();
        }
    }

    /**
     * Turn off the device's flashlight.
     */
    public void setTorchOff() {
        barcodeView.setTorch(false);

        if (torchListener != null) {
            torchListener.onTorchOff();
        }
    }

    /**
     * Handles focus, camera, volume up and volume down keys.
     * <p>
     * Note that this view is not usually focused, so the Activity should call this directly.
     */
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        switch (keyCode) {
            case KeyEvent.KEYCODE_FOCUS:
            case KeyEvent.KEYCODE_CAMERA:
                // Handle these events so they don't launch the Camera app
                return true;
            // Use volume up/down to turn on light
//            case KeyEvent.KEYCODE_VOLUME_DOWN:
//                setTorchOff();
//                return true;
//            case KeyEvent.KEYCODE_VOLUME_UP:
//                setTorchOn();
//                return true;
        }
        return super.onKeyDown(keyCode, event);
    }

    public void setTorchListener(TorchListener listener) {
        this.torchListener = listener;
    }

    /**
     * The Listener to torch/fflashlight events (turn on, turn off).
     */
    public interface TorchListener {

        void onTorchOn();

        void onTorchOff();
    }

    /**
     * 显示扫描框
     */
    public void showScanRect() {
        if (mScanBoxView != null) {
            mScanBoxView.setVisibility(View.VISIBLE);
        }
    }

    /**
     * 隐藏扫描框
     */
    public void hiddenScanRect() {
        if (mScanBoxView != null) {
            mScanBoxView.setVisibility(View.GONE);
        }
    }

    /**
     * 切换成扫描条码样式
     */
    public void changeToScanBarcodeStyle() {
        if (null != mScanBoxView && !mScanBoxView.getIsBarcode()) {
            mScanBoxView.setIsBarcode(true);
        }
    }

    /**
     * 切换成扫描二维码样式
     */
    public void changeToScanQRCodeStyle() {
        if (null != mScanBoxView && mScanBoxView.getIsBarcode()) {
            mScanBoxView.setIsBarcode(false);
        }
    }

    /**
     * 设置自助借书条码框
     */
    public void setScannerViewRect() {
        if (null != mScanBoxView) {
            mScanBoxView.setTopOffset((int) dipToPx(getContext(), 100));
            mScanBoxView.setRectWidth(getScreenWidth(getContext()));
            mScanBoxView.setRectHeight((int) dipToPx(getContext(), 120));
            mScanBoxView.setOnlyDecodeScanBoxArea(true);
            mScanBoxView.setShowDefaultGridScanLineDrawable(true);
            mScanBoxView.setScanLineBitmap(BitmapFactory.decodeResource(getResources(), R.mipmap.qrcode_default_scan_line));
            mScanBoxView.setCornerLength(0);
        }
    }

    /**
     * 推荐新书
     */
    public void setScannerViewRectForRecommendBook() {
        if (null != mScanBoxView) {
            mScanBoxView.setTopOffset((int) dipToPx(getContext(), 100));
            mScanBoxView.setRectWidth(getScreenWidth(getContext()));
            mScanBoxView.setRectHeight((int) dipToPx(getContext(), 120));
            mScanBoxView.setOnlyDecodeScanBoxArea(true);
            mScanBoxView.setShowDefaultGridScanLineDrawable(true);
            mScanBoxView.setScanLineBitmap(BitmapFactory.decodeResource(getResources(), R.mipmap.qrcode_default_scan_line));
            mScanBoxView.setCornerLength(0);
        }
    }

    /**
     * 设置自助借书isbn
     */
    public void setScannerViewRectForISBN() {
        if (null != mScanBoxView) {
            int rectHeight = (int) dipToPx(getContext(), 230);
            mScanBoxView.setRectWidth(rectHeight);
            mScanBoxView.setRectHeight(rectHeight);
            mScanBoxView.setOnlyDecodeScanBoxArea(true);
            mScanBoxView.setShowDefaultGridScanLineDrawable(true);
            mScanBoxView.setScanLineBitmap(BitmapFactory.decodeResource(getResources(), R.mipmap.qrcode_default_scan_line));
            mScanBoxView.setCornerColor(Color.parseColor("#ff0000"));
            mScanBoxView.setBorderSize(0);
            int actionBarHeight = (int) dipToPx(getContext(), 70);
            int height = (getScreenHeight(getContext()) - rectHeight - actionBarHeight) / 2;
            mScanBoxView.setTopOffset(height);
        }
    }

    public int getScreenWidth(Context context) {
        DisplayMetrics dm = new DisplayMetrics();
        ((Activity) context).getWindowManager().getDefaultDisplay().getMetrics(dm);
        return dm.widthPixels;
    }

    public int getScreenHeight(Context context) {
        DisplayMetrics dm = new DisplayMetrics();
        ((Activity) context).getWindowManager().getDefaultDisplay().getMetrics(dm);
        return dm.heightPixels;
    }

    public float dipToPx(Context context, int dip) {
        return dip * getScreenDensity(context) + 0.5f;
    }

    public float getScreenDensity(Context context) {
        try {
            DisplayMetrics dm = new DisplayMetrics();
            ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getMetrics(dm);
            return dm.density;
        } catch (Exception e) {
            return DisplayMetrics.DENSITY_DEFAULT;
        }
    }


    public void destoryCamera() {
        if (null != barcodeView) {
            barcodeView.closeCamera();
        }
    }
}
